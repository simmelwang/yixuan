
html
  Vue插件的引用
    一般我们选择在mainjs文件中导包引用（1、import;2、使用;3、一般都还有挂载的操作）
  
css
  1、样式级别
    1、除了我么常用的样式风格（css）（包括ID，class，*）等等，
    我们如果使用了scss编写样式的方式，它可以嵌套写入样式，这样的话，减少了一级一级寻找元素的方式，减少代码量。
    2、另外一点的话，我们可以注意到，在我们书写页面样式的时候，为了避免样式被我们不希望的元素覆盖，
    我们可以选择在命名的时候规范的使用一些好的习惯（eg: .demo-chird）,
    还有比较好的方式就是，在Vue的项目里面，我们可以选择使用Scope这个标签来确保样式仅在当前页面生效
  2、rgb和rgba(css)
    rgb三个参数（早期版本）；rgba,四个参数（后期版本）；
    rgba的兼容性或比rgb更好，或者吧rgba理解成rgb-plus。
  3、清除浮动
    两种比较推荐的方法(https://blog.csdn.net/h_qingyi/article/details/81269667)
    1、使用after伪元素清除浮动
    （符合闭合浮动思想，结构语义化正确）
    （ie6-7不支持伪元素：after，使用zoom:1触发hasLayout.）
      .clearfix:after{/*伪元素是行内元素 正常浏览器清除浮动方法*/
          content: "";
          display: block;
          height: 0;
          clear:both;
          visibility: hidden;
      }
      .clearfix{
          *zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/
      }

    2、使用before和after双伪元素清除浮动
    （代码更简洁）
    （用zoom:1触发hasLayout.）
      .clearfix:after,.clearfix:before{
          content: "";
          display: table;
      }
      .clearfix:after{
          clear: both;
      }
      .clearfix{
          *zoom: 1;
      }
    直接将.clearfix加给父元素就可清除浮动
    3、overflow属性容易使不换行的元素不显示
    4、额外标签法（clear：both），语义差，代码不可读
    
JavaScript
  我们现在用的比较多的是Es6，是js语言的下一代标准，易于进行大型的编程开发
